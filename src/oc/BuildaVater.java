package oc;import java.awt.Color;import java.awt.Font;import java.awt.Insets;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.ItemEvent;import java.awt.event.ItemListener;import java.util.ArrayList;import java.util.Vector;import javax.swing.BorderFactory;import javax.swing.JButton;import javax.swing.JCheckBox;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.SwingUtilities;import javax.swing.border.TitledBorder;import org.w3c.dom.Element;import org.w3c.dom.NodeList;public abstract class BuildaVater extends BuildaPanel implements                         ActionListener, ItemListener, BuildaSTK {	@SuppressWarnings("unused")	private Information informationClass;	private Vector<ChooserGruppe> myChooserGruppen = new Vector<ChooserGruppe>();	private JScrollPane textAreaScrollPane;	private JTextAreaWithPopup textArea = new JTextAreaWithPopup(true, false);	public String getText() {		return textArea.getText();	}	private Sonstige[] sonstige;	private JButton markieren = new JButton(BuildaHQ.translate("Alles markieren"));	private JCheckBox htmlStyleCheckBox = new JCheckBox(BuildaHQ.translate("Easy-HTML Formatierung"), BuildaHQ.formatierung == 1);	private JCheckBox alleKostenCheckBox = new JCheckBox(BuildaHQ.translate("Alle Punktkosten"), BuildaHQ.allePunktkosten);	private JCheckBox kurzerTextCheckBox = new JCheckBox(BuildaHQ.translate("Kurze Armeeliste"), BuildaHQ.kurzerText);	private JCheckBox sterneAnzeigenCheckBox = new JCheckBox(BuildaHQ.translate("Sterne anzeigen"), BuildaHQ.sterneAnzeigen);	private JCheckBox zusatzInfosCheckBox = new JCheckBox(BuildaHQ.translate("Zusätzliche Informationen"), BuildaHQ.zusatzInfos);	private JCheckBox excelModeCheckBox = new JCheckBox(BuildaHQ.translate("Führende Leerzeichen"), BuildaHQ.excelMode);    protected boolean nurBeiLeerenBuilderTrue = false;	protected int cnt = 0;	protected String textAreaUeberschrift = "";	protected String nameDerArtDerArmee = "";	protected String nameDerArtDerArmeeDekliniert = "";	protected String anfangDerTextarea = ""; // s. ImperialeArmee	private boolean geaddet = false;	public JPanel getPanel() {		return this.panel;	}	public BuildaVater() {		panel.setBackground(Color.WHITE);		panel.setBounds(0, 0, 4500, CHOOSER_Y + 100);	}	public void complete() {		if (!nurBeiLeerenBuilderTrue) {			if (OnlineCodex.getGame() == OnlineCodex.NECROMUNDA) {				sonstige = new Sonstige[] {					new oc.necro.sonstige.Territorien(),					new oc.necro.sonstige.Waffen(),					new oc.necro.sonstige.Werte()                                 };				for (int i = 0; i < sonstige.length; i++) {					sonstige[i].getPanel().setLocation(						cnt,						i > 0 ? sonstige[i - 1].getPanel().getY()							+ sonstige[i - 1].getPanel().getHeight()							+ 20 : 40);					panel.add(sonstige[i].getPanel());				}				cnt += sonstige[0].getPanel().getWidth() + 50;			}			textArea.setLineWrap(true);			textArea.setWrapStyleWord(true);			textArea.setToolTipText(BuildaHQ					.translate("Zum rauskopieren Strg+C benutzen")); // oder																		// Rechtsklick																		// ->																		// Kopieren			BuildaHQ.newGUIComponent(textArea);			textArea.removeMouseWheelListener(BuildaHQ.defaultMouseWheelListener);			textAreaScrollPane = new JScrollPane(textArea);			textAreaScrollPane.setBounds(cnt, 70, 600, 645);			textAreaScrollPane.setBorder(BorderFactory.createTitledBorder(null,					textAreaUeberschrift.replace("Meine",							BuildaHQ.translate("Meine")), TitledBorder.CENTER,					TitledBorder.BELOW_TOP, new Font("Viner Hand ITC",							Font.BOLD, 16)));			textAreaScrollPane.setBackground(Color.WHITE);			panel.add(textAreaScrollPane);			markieren.setBounds(cnt, 12, 135, 20);			markieren.addActionListener(this);			BuildaHQ.newGUIComponent(markieren);			markieren.setToolTipText(BuildaHQ					.translate("Zum rauskopieren Strg+C benutzen"));			panel.add(markieren);			htmlStyleCheckBox.setBounds(cnt + 160, 10, 185, 20);			htmlStyleCheckBox.setBackground(Color.WHITE);			htmlStyleCheckBox.addItemListener(this);			BuildaHQ.newGUIComponent(htmlStyleCheckBox);			htmlStyleCheckBox					.setToolTipText(BuildaHQ							.translate("Unbedingt anhaken, wenn die Armeeliste in ein Forum kopiert werden soll"));			panel.add(htmlStyleCheckBox);			alleKostenCheckBox.setBounds(cnt + 160, 40, 185, 20);			alleKostenCheckBox.setBackground(Color.WHITE);			alleKostenCheckBox.addItemListener(this);			BuildaHQ.newGUIComponent(alleKostenCheckBox);			panel.add(alleKostenCheckBox);			kurzerTextCheckBox.setBounds(cnt + 350, 10, 120, 20);			kurzerTextCheckBox.setBackground(Color.WHITE);			kurzerTextCheckBox.addItemListener(this);			kurzerTextCheckBox.setMargin(new Insets(0, 0, 0, 0));			BuildaHQ.newGUIComponent(kurzerTextCheckBox);			panel.add(kurzerTextCheckBox);			sterneAnzeigenCheckBox.setBounds(cnt + 350, 40, 120, 20);			sterneAnzeigenCheckBox.setBackground(Color.WHITE);			sterneAnzeigenCheckBox.addItemListener(this);			BuildaHQ.newGUIComponent(sterneAnzeigenCheckBox);			panel.add(sterneAnzeigenCheckBox);			zusatzInfosCheckBox.setBounds(cnt + 510, 10, 185, 20);			zusatzInfosCheckBox.setBackground(Color.WHITE);			zusatzInfosCheckBox.addItemListener(this);			BuildaHQ.newGUIComponent(zusatzInfosCheckBox);			panel.add(zusatzInfosCheckBox);			excelModeCheckBox.setBounds(cnt + 510, 40, 185, 20);			excelModeCheckBox.setBackground(Color.WHITE);			excelModeCheckBox.addItemListener(this);			BuildaHQ.newGUIComponent(excelModeCheckBox);			panel.add(excelModeCheckBox);			armeelistenFormatAnpassen(true);			new RefreshListener((byte) 13) {				public void refresh() {					textAreaRefresh();				}			};		}	}	public double getKosten() {		double kosten = 0;		for (int i = 0; i < myChooserGruppen.size(); ++i) {			kosten += myChooserGruppen.elementAt(i).getKosten();		}		return kosten;	}	protected String getVolksSpezifischeInfos() {		return anfangDerTextarea; // kann in einer Sohnklasse overridet werden.	}	public void textAreaRefresh() {		StringBuilder text = new StringBuilder(getVolksSpezifischeInfos());		if (BuildaHQ.zusatzInfos) {			if (text.toString().length() != 0) {				text.append(ZEILENUMBRUCH);			}			ChooserGruppe cg;			for (int i = 0; i < myChooserGruppen.size(); ++i) {				cg = myChooserGruppen.elementAt(i);				if (OnlineCodex.getGame() == OnlineCodex.WH40K						|| OnlineCodex.getGame() == OnlineCodex.WH40K_LEGACY) {					text.append(cg.getAnzahlText(false)							+ " "							+ cg.kategorieText()							+ " "							+(cg.getAllyAnzahl()>0?cg.getAllyAnzahlText(false):"")							+ " "							+ cg.allyText()							+ ((cg.getAllyAnzahl()+cg.getAnzahl()) > 0 ? ": "									+ entferneNullNachkomma(cg.getKosten())									+ " "									+ BuildaHQ.translate("Pkt.")									+ "   "									+ BuildaHQ.formatDouble(											((double) cg.getKosten())													/ ((double) getKosten())													* 100, 1) + "%"									+ ZEILENUMBRUCH : ZEILENUMBRUCH));				} else {					text.append(cg.getAnzahlText(false)							+ " "							+ cg.kategorieText()							+ (cg.getAnzahl() > 0 ? ": "									+ entferneNullNachkomma(cg											.getProzentKosten())									+ " "									+ BuildaHQ.translate("Pkt.")									+ "   "									+ BuildaHQ.formatDouble(											((double) cg.getProzentKosten())													/ ((double) Double.valueOf(															budget.getText())															.doubleValue())													* 100, 1) + "%"									+ ZEILENUMBRUCH : ZEILENUMBRUCH));				}			}			if (BuildaHQ.kurzerText) {				text.append(ZEILENUMBRUCH);			}		}				final String lzpzu = " " + ZEILENUMBRUCH; // leerzeichen plus zeilenumbruch		for (int i = 0; i < myChooserGruppen.size(); ++i) {			String str = myChooserGruppen.elementAt(i).getText();			//ChooserGruppe cg = myChooserGruppen.elementAt(i);			//cg.                        // ExcelMode 			if (BuildaHQ.excelMode && !str.equals("")) {				// das ist eine Programmierkruecke, da sonst Zeilen, die nur aus Leerzeichen bestehen, ignoriert werden.				str = str.replaceAll(ZEILENUMBRUCH, lzpzu);				String[] tokens = str.split(ZEILENUMBRUCH);								for (int j = 0; j < tokens.length; ++j) {					String token = tokens[j];					String trimtok = token.trim();					if (trimtok.startsWith("-")) {						token = token.replaceFirst("-", " -");					} else if (trimtok.startsWith("+")) {						token = token.replaceFirst("\\+", " \\+");					}					text.append(token);										// beim letzten lauf keinen Zeilenumbruch hinzufuegen.					if (j < tokens.length - 1) { 						text.append(ZEILENUMBRUCH);					}				}				text.append(ZEILENUMBRUCH);			} else {				text.append(str);			}		}		if (OnlineCodex.getGame() == OnlineCodex.NECROMUNDA)			text.append(getTextSonstige());		text.append(BuildaHQ.formatierFettItalicUnderline(ZEILENUMBRUCH				+ BuildaHQ.translate("Gesamtpunkte") + " "				+ nameDerArtDerArmeeDekliniert + " : "				+ entferneNullNachkomma(getKosten()) + ZEILENUMBRUCH));		textArea.setText(text.toString());		// nur wenn keine Verticale Scrollleiste angezeigt wird, darf ein		// MouseWheelLsitener drauf sein. Ansosnten überschreibt es das		// Mausradscrolen der Scrolleiste		boolean vielText = textArea.getText().split(ZEILENUMBRUCH).length > BUILDAVATER_TEXTAREA_MAXROWS;		if (geaddet && vielText) {			textArea.removeMouseWheelListener(BuildaHQ.defaultMouseWheelListener);			geaddet = false;		}		else if (!geaddet && !vielText) {			textArea.addMouseWheelListener(BuildaHQ.defaultMouseWheelListener);			geaddet = true;		}		try {			textArea.select(0, 0);		} catch (Exception e) {		} // textArea wird nach oben gescrollt	}	public void adden(ChooserGruppe c) {		myChooserGruppen.addElement(c);		panel.add(myChooserGruppen.lastElement().getPanel());	}	public void itemStateChanged(ItemEvent event) {		armeelistenFormatAnpassen((JCheckBox) event.getSource() == kurzerTextCheckBox);	}	public void armeelistenFormatAnpassen(boolean kurzeTextAnpassen) {		if (htmlStyleCheckBox.isSelected()) {			BuildaHQ.formatierung = 1;		}		else {			BuildaHQ.formatierung = 0;		}		BuildaHQ.allePunktkosten = alleKostenCheckBox.isSelected();		BuildaHQ.sterneAnzeigen = sterneAnzeigenCheckBox.isSelected();		BuildaHQ.zusatzInfos = zusatzInfosCheckBox.isSelected();		BuildaHQ.excelMode = excelModeCheckBox.isSelected();		if (kurzeTextAnpassen) {			BuildaHQ.machTextStrings(kurzerTextCheckBox.isSelected());		} // machTextStrings() verändert auch den boolean		textAreaRefresh();	}	public void actionPerformed(ActionEvent event) {		textArea.selectAll();		textArea.requestFocusInWindow();	}	public String getSaveText() {		StringBuilder sammler = new StringBuilder();		for (int i = 0; i < myChooserGruppen.size(); ++i) {			sammler.append(myChooserGruppen.elementAt(i).getSaveText());			sammler.append(SAVETEXT_TRENNER4);		}		if (OnlineCodex.getGame() == OnlineCodex.NECROMUNDA)			sammler.append(getSaveTextSonstige());		return sammler.toString();	}		public String getSaveTextAllies() {		StringBuilder sammler = new StringBuilder();		for (int i = 0; i < myChooserGruppen.size(); ++i) {			sammler.append(myChooserGruppen.elementAt(i).getSaveTextAllies());			sammler.append(SAVETEXT_TRENNER4);		}		return sammler.toString();	}	public String getSaveTextApo() {		StringBuilder sammler = new StringBuilder();		for (int i = 0; i < 6; ++i) {			sammler.append(myChooserGruppen.elementAt(i).getSaveText());			sammler.append(SAVETEXT_TRENNER4);		}		return sammler.toString();	}                public Element getSaveElement() {            Element root = BuildaHQ.getNewXMLElement(ELEMENT_NAME_ONLINECODEX);                        ArrayList<Element> chooserGruppen = new ArrayList<Element>();                        for(int i=0;i<myChooserGruppen.size();++i) {                if(myChooserGruppen.elementAt(i).getmC().size() <= 1) continue;                root.appendChild(myChooserGruppen.elementAt(i).getSaveElement());            }            //            if(OnlineCodex.getGame() == OnlineCodex.NECROMUNDA) root.appendChild(getSaveElementSonstige());                        if(sonstige != null) {                Element sonstigeRoot = BuildaHQ.getNewXMLElement(ELEMENT_NAME_SONSTIGESGRUPPE);                                                for(int i=0;i<sonstige.length;i++) {                    sonstigeRoot.appendChild(sonstige[i].getSaveElement());                }                                root.appendChild(sonstigeRoot);            }                        return root;        }	public void load(String saveText) {		String[] teile = { saveText };		if (OnlineCodex.getGame() == OnlineCodex.NECROMUNDA) {			teile = saveText.split(SAVETEXT_TRENNER5);			for (int i = 0; i < sonstige.length; i++) {				sonstige[i].load(teile[i + 1], SAVETEXT_TRENNER6);			}		}		String[] splittet = teile[0].split(SAVETEXT_TRENNER4);		for (int i = 0; i < myChooserGruppen.size(); ++i) {			if (myChooserGruppen.elementAt(i).getKategorie() == 7					|| myChooserGruppen.elementAt(i).getKategorie() == 1) { // lädt erst HQ und Heroes				myChooserGruppen.elementAt(i).load(splittet[i]);			}		}		for (int i = 0; i < myChooserGruppen.size(); ++i) {			if (myChooserGruppen.elementAt(i).getKategorie() != 7					&& myChooserGruppen.elementAt(i).getKategorie() != 1) { // danach den Rest.                                                                                                // Lädt erst die Einträge, die Spezialauswahlen aktivieren, danach die Standard-Kategorie.                                                                                                // Ich weiß, ist dreckig^^				myChooserGruppen.elementAt(i).load(splittet[i]);			}		}	}                public void loadElement(Element e) {            NodeList childrenChooserGruppe = e.getElementsByTagName(ELEMENT_NAME_CATEGORY);                        int childrenMax = myChooserGruppen.size() > childrenChooserGruppe.getLength() ? childrenChooserGruppe.getLength() : myChooserGruppen.size();                        for(int i=0;i<myChooserGruppen.size();++i) {                                ChooserGruppe c = myChooserGruppen.elementAt(i);                if(!(c.getKategorie() == 1 || c.getKategorie() == 7)) continue;                                for(int j=0;j<childrenMax;j++) {                    Element child = (Element)childrenChooserGruppe.item(j);                    int id = Integer.parseInt(child.getAttribute("id"));                                        if(!(id == 1 || id == 7)) continue;                                        if(id == c.getKategorie()) {                        c.loadElement(child);                    }                }            }                        for(int i=0;i<myChooserGruppen.size();++i) {                                ChooserGruppe c = myChooserGruppen.elementAt(i);                if((c.getKategorie() == 1 || c.getKategorie() == 7)) continue;                                for(int j=0;j<childrenMax;j++) {                    Element child = (Element)childrenChooserGruppe.item(j);                    int id = Integer.parseInt(child.getAttribute("id"));                                        if(id == 1 || id == 7) continue;                                        if(id == c.getKategorie()) {                        c.loadElement(child);                    }                }            }                        if(OnlineCodex.getGame() == OnlineCodex.NECROMUNDA && e.getElementsByTagName(ELEMENT_NAME_SONSTIGESGRUPPE) != null) {                Element sonstigesRoot = (Element)e.getElementsByTagName(ELEMENT_NAME_SONSTIGESGRUPPE).item(0);                NodeList sonstigeChildren = sonstigesRoot.getChildNodes();                                for(int i=0;i<sonstigeChildren.getLength();i++) {                    Element child = (Element)sonstigeChildren.item(i);                    sonstige[i].loadElement(child);                }            }        }	private String getTextSonstige() {		StringBuilder text = new StringBuilder("");		String sterne = BuildaHQ.sterneAnzeigen ? "***************  " : "";		String überschrift = (BuildaHQ.kurzerText ? "" : ZEILENUMBRUCH)				+ ZEILENUMBRUCH + sterne + "Sonstiges" + sterne + ZEILENUMBRUCH;		text.append(überschrift);		for (int i = 0; i < sonstige.length; i++) {			text.append(sonstige[i].getText());		}		if (text.toString().endsWith(", ")) {			text = text.deleteCharAt(text.lastIndexOf(","));		}		text.append((BuildaHQ.kurzerText ? ZEILENUMBRUCH : "") + ZEILENUMBRUCH);		return text.toString();	}	private String getSaveTextSonstige() {		StringBuilder text = new StringBuilder("");		if (sonstige != null) {			for (int i = 0; i < sonstige.length; i++) {				text.append(SAVETEXT_TRENNER5);				text.append(sonstige[i].getSaveText(SAVETEXT_TRENNER6));			}		}		return text.toString();	}                private Element getSaveElementSonstige() {            Element root = BuildaHQ.getNewXMLElement("Sonstige");                        if(sonstige != null) {                for(int i=0;i<sonstige.length;i++) {                    root.appendChild(sonstige[i].getSaveElement());                }            } else {                return null;            }                        return null;        }	protected void showModalDialog(String s) {		final ModalDialog md = new ModalDialog(s, true);		SwingUtilities.invokeLater(new Runnable() {			public void run() {				md.setVisible(true);			}		});	}	protected ChooserGruppe getChooserGruppe(int i){		return myChooserGruppen.elementAt(i);	}		protected int getChooserAnzahl(){		return myChooserGruppen.size();	}		// protected void	// finalize(){System.out.println("Object gelöscht in "+nameDerArtDerArmee+"Builda !!");}}