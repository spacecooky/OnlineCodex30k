package oc;import java.util.StringTokenizer;import java.util.Vector;import javax.swing.JDialog;import javax.swing.JOptionPane;import javax.swing.JPanel;import org.w3c.dom.Element;import oc.whfb.armies.VOLKBretonia;import org.w3c.dom.Node;import org.w3c.dom.NodeList;public abstract class OptionsCollection extends BuildaPanel {	protected Vector<OptionsVater> optionen = new Vector<OptionsVater>();	protected Vector<OptionsGruppeEintrag> ogE = new Vector<OptionsGruppeEintrag>(); // wird in den  extends Eintrag  Klassen verwendet	protected Vector<OptionsGruppeEintrag> ogEa = new Vector<OptionsGruppeEintrag>(); // wird in den  extends Eintrag  Klassen  bei Necromunda verwendet	protected Picture ico;	protected double grundkosten = 0;	protected String name = "";	protected int cnt = randAbstand;	protected int ID; // wichtig!	boolean überschriftSetzen = false;	public int getID() {		return this.ID;	}	public String getName() {		return this.name;	}		public void setName(String name) {		this.name = name;	}	public OptionsCollection() { // zum verschieben der Rüstkammerstarter. Wenn der Eintrag selber in refresh sowas macht, ist das gültig, weil es schließlich NACH dem hier passiert (siehe reihenfolge bei RefreshListener)		new RefreshListener((byte) 3) {			public void refresh() {				aktualisiereKammerStarterLocation();			}		};	}	public void seperator() {		cnt += 10;	}	public void seperator(int i) {		cnt += i;	}	public void add(OptionsVater o) {		panel.add(o.getPanel());		if(!(o instanceof Picture)) optionen.add(o);		if (o instanceof OptionsUpgradeGruppe || o instanceof OptionsZaehlerGruppe) {			ogE.clear();		}		cnt += o.getHoehe();	}		public void addAt(OptionsVater o, int i) {		panel.add(o.getPanel(),i);		optionen.add(i,o);		if (o instanceof OptionsUpgradeGruppe || o instanceof OptionsZaehlerGruppe) {			ogE.clear();		}		cnt += o.getHoehe();	}		public void remove(OptionsVater o) {		panel.remove(o.getPanel());		optionen.remove(o);		cnt -= o.getHoehe();	}	public int getHöhe() {		int höhe = 0;		for (int i = 0; i < optionen.size(); ++i) {			int nächsteHöhe = (int) (optionen.elementAt(i).getPanel().getLocation().getY() + (int) (optionen.elementAt(i).getHoehe()));			if (höhe < nächsteHöhe) {				höhe = nächsteHöhe;			}		}		try {			int bildHöhe = (int) ico.getLocation().getY() + ico.getSize().height;			if (bildHöhe + 20 > höhe) { // bei imageIcon höhe zählt noch +20 wegen dem Label unterdrunter dazu, da das Label das Bild blockiert die Buttons aber nicht				höhe = bildHöhe + 22;			}		} catch (Exception e) {		}		return höhe + randAbstand;	}	public double getKosten() {		double kosten = 0;		for (int i = 0; i < optionen.size(); ++i) {			kosten += optionen.elementAt(i).getKosten();		}		return kosten + grundkosten;	}	public String getSaveText(String trenner) {		StringBuilder s = new StringBuilder();		for (int i = 0; i < optionen.size(); ++i) {			s.append(optionen.elementAt(i).getSaveText() + trenner);		}		return s.toString();	}                public Element getSaveElement() {            Element root = BuildaHQ.getNewXMLElement("Collection");                        for(int i=0;i<optionen.size();i++) {                root.appendChild(optionen.elementAt(i).getSaveElement());            }                        return root;        }	public void load(String s, String trenner) {            String[] splittet = s.split(trenner);            for (int i = 0; i < optionen.size(); ++i) {                optionen.elementAt(i).load(splittet[i]);                if(optionen.elementAt(i) instanceof RuestkammerStarter){                    RuestkammerStarter rk = ((RuestkammerStarter) optionen.elementAt(i));                    checkRuestkammerStarter(rk);                }            }	}	public void loadElement(Element e) {            NodeList children = e.getChildNodes();            for (int i = 0; i < optionen.size(); ++i) {//                if(children.item(i) != null && children.item(i).getNodeType() == Node.ELEMENT_NODE) {                    optionen.elementAt(i).loadElement((Element)children.item(i));                    //                }                if(optionen.elementAt(i) instanceof RuestkammerStarter){                    RuestkammerStarter rk = ((RuestkammerStarter) optionen.elementAt(i));                    checkRuestkammerStarter(rk);                }            }	}	public void aktualisiereKammerStarterLocation() {            boolean ersterStarter = true;            for (int i = 0; i < optionen.size(); ++i) {                if (optionen.elementAt(i) instanceof RuestkammerStarter) {                    RuestkammerStarter rk = ((RuestkammerStarter) optionen.elementAt(i));                    if (rk.isSelected()) {                            rk.textUebernehmen();                    }                    if (ersterStarter) {                            ersterStarter = false;                    } else {                        JPanel p = rk.getPanel();                        JPanel pMinus1 = optionen.elementAt(i - 1).getPanel(); // index-1 geht hier immer, weil es ja nich der erste Starter sein kann                        if (p.getLocation().getX() != pMinus1.getLocation().getX()) {                                continue;                        } // erfüllt zusätzlich diesselbe funktion wie ersterStater bei der nächstenReihe                        int zusatzAbstand = rk.getSeperator();                        if (zusatzAbstand == -88) {                                zusatzAbstand = DEFAULT_KAMMERSTARTER_Abstand_Y;                        }                        p.setLocation((int) p.getLocation().getX(), (int) pMinus1.getLocation().getY() + pMinus1.getSize().height + zusatzAbstand);                    }                }            }	}                public void checkRuestkammerStarter(RuestkammerStarter rk) {            if(!(rk.getKammer().toString().indexOf("MagicItems") == -1 ) || !(rk.getKammer().toString().indexOf("Banner")== -1 ) || !(rk.getKammer().toString().indexOf("Gabe")== -1 )                 || !(rk.getKammer().toString().indexOf("GiftsOf")== -1 ) || !(rk.getKammer().toString().indexOf("Spites")== -1 ) || !(rk.getKammer().toString().indexOf("Assassin")== -1 ) ) {					                    String text = "";                    if(rk.getKammer().getText().length() > 2){                            text = BuildaHQ.translate(rk.getKammer().getText().substring(1, rk.getKammer().getText().length()));                    }                    text = text.replaceAll("\n- ", "-");                    StringTokenizer tokenizer = new StringTokenizer( text,",");                    while(tokenizer.hasMoreElements()){                            String tok = BuildaHQ.translate(tokenizer.nextToken().trim());						                            if(!(tok.indexOf("Tugend")==-1) && reflectionKennung.equals("BT")){                                    int kost = 2;                                    if(VOLKBretonia.Vows.containsKey(tok)){                                            kost = VOLKBretonia.Vows.get(tok);                                            kost ++;								                                    }                                    VOLKBretonia.Vows.put(tok, kost);                            }else if (!reflectionKennung.equals("DOC") && !commonItems(tok)){                                    if(BuildaHQ.Items != null && BuildaHQ.Items.contains(tok)){                                            JOptionPane op = new JOptionPane(tok + " darf nur einmal enthalten sein.",JOptionPane.ERROR_MESSAGE);                                            JDialog dialog = op.createDialog("Validierungs Fehler");                                            dialog.setAlwaysOnTop(true); //<-- this line                                            dialog.setModal(true);                                            dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);                                            dialog.setVisible(true);                                    }                                    if(BuildaHQ.Items != null) BuildaHQ.Items.add(tok);                            }                    }            } else if(!(rk.getKammer().toString().indexOf("Tugend") == -1 )) {                    String text = "";                    if(rk.getKammer().getText().length() > 2){                            text= rk.getKammer().getText().substring(2, rk.getKammer().getText().length());					                    }                     text = text.replaceAll("\n- ", "-");                    StringTokenizer tokenizer = new StringTokenizer( text,",");                    while(tokenizer.hasMoreElements()){                            String tok = BuildaHQ.translate(tokenizer.nextToken().trim()); 						                            int kost = 2;                            if(VOLKBretonia.Vows.containsKey(tok)){                                    kost = VOLKBretonia.Vows.get(tok);                                    kost ++;								                            }                            VOLKBretonia.Vows.put(tok, kost);                    }            }        }	public abstract int getBreite();	public abstract String getText();		private boolean commonItems(String tok){		boolean common = false;			 if(!(tok.indexOf("Talisman der Leere") == -1))		common = true;		else if(!(tok.indexOf("Magiebannende Rolle") == -1))	common = true;		else if(!(tok.indexOf("Energiestein") == -1))			common = true;		else if(!(tok.indexOf("Warpsteinmuskete") == -1))		common = true;		else if(!(tok.indexOf("Giftattacken") == -1))			common = true;		else if(!(tok.indexOf("Schwanzwaffe") == -1))			common = true;		else if(!(tok.indexOf("Warpsteinpistole") == -1))		common = true;		else if(!(tok.indexOf("Wachratte") == -1))				common = true;		else if(!(tok.indexOf("Gnoblar-Diebstein") == -1))		common = true;		else if(!(tok.indexOf("Zaubapilzä") == -1))				common = true;		else if(!(tok.indexOf("Todessplitter") == -1))			common = true;		else if(!(tok.indexOf("Tanz der Verdammnis") == -1))	common = true;		else if(!(tok.indexOf("Berührung des Todes") == -1))	common = true;		else if(!(tok.indexOf("Hexenbräu") == -1))				common = true;		else if(!(tok.indexOf("Rune des Khaine") == -1))		common = true;		else if(!(tok.indexOf("Geste des Khaine") == -1))		common = true;		else if(!(tok.indexOf("Kriegsschrei des Khaine") == -1))common = true;		else if(!(tok.indexOf("Blutfeuer") == -1))				common = true;		else if(!(tok.indexOf("Schwarzer Lotus") == -1))		common = true;		else if(!(tok.indexOf("Höllendrachengift") == -1))		common = true;				return common;	}	}